/* Linked lists */

# include <stdlib.h>
# include <string.h>
# include <stdio.h>
# include "list.h"


/*
void print_list(struct list *list)
{
  int line = 1;
  printf("[");
  if (list->next)
    {
      goto pastfst;
      while (list->next)
	{
	  line += printf(";");
	  if (line > 72)
	    {
	      printf("\n ");
	      line = 1;
	    }
	pastfst:
	  line += printf(" %d", list->next->data);
	  list = list->next;
	}
    }
  printf(" ]");
}
*/

/*
 * Standard operations
 * We're working with sentinels and external allocation
 * This means that our lists always have a fake head (the sentinel)
 * and all allocations (and free) are performed by the caller, not the operation
 */

/*
 * list_init(list)
 * initialise the sentinel node list
 */
void list_init(struct list *list)
{
  list -> next = NULL;
}
/*
 * list_is_empty(list)
 * returns true if the list is empty
 * remember, we have a sentinel thus a list always has at least one node,
 * the list is empty if this node doesn't have a next.
 */
int list_is_empty(struct list *list)
{ if (list -> next == NULL)
    return 1;
  return 0;
}

/*
 * list_len(list)
 * returns the length of the list (don't count the sentinel)
 */
size_t list_len(struct list *list)
{
  size_t i = 0;
  for(; list -> next != NULL; list = list -> next)
    i++;
  return i;
}

/*
 * list_push_front(list, elm)
 * attach elm in front of list, that is after the sentinel.
 * Note that elm is already a node, you just have to attach it.
 */
void list_push_front(struct list *list, struct list *elm)
{
  elm -> next = list -> next;
  list -> next = elm;
}

/*
 * list_pop_front(list)
 * Extract the first element (not the sentinel) of list.
 * This operation detaches the element from the list and returns it (caller is
 * responsible for freeing it.)
 * If the list is empty, the function returns NULL.
 */
struct list* list_pop_front(struct list *list)
{
  if (list && list -> next)
    {
      struct list *cur = list;
      cur = list -> next;
      list -> next = list -> next -> next;
      cur = NULL;
      return cur;
    }
  return NULL;
}

/*
 * list_find(list, value)
 * search for the first node containing value and returns (without detaching it)
 * the corresponding list node. The function returns NULL if the value is not
 * present in the list.
 */
struct list* list_find(struct list *list, int value)
{
  while (list -> next != NULL && list -> data != value)
    list = list -> next;
  if (list -> data == value)
    return list;
  return NULL;
}

/*
 * list_is_sorted(list)
 * check whether the list is sorted in increasing order
 */
int list_is_sorted(struct list *list)
{
  while (list -> next != NULL && list -> data < list -> next -> data)
    list = list -> next;
  if (list -> next == NULL)
    return 1;
  return 0;
}

/*
 * list_insert(list, elm)
 * insert elm in the sorted list (keeping the list sorted)
 * Like list_push_front, elm is already a list node.
 */
void list_insert(struct list *list, struct list *elm)
{
  if (elm != NULL)
    {
      while((list -> next != NULL) && (elm -> data > list -> next -> data))
	{  list = list -> next;  }
      if (list -> next != NULL)
	{
	  elm -> next = list -> next;
	  list -> next = elm;
	}
      else
	{
	  list -> next = elm;
	}
    }    
}

/*
 * More algorithms
 */

/*
 * list_rev(list)
 * reverse the list using the same nodes (just move them) and the same sentinel.
 */

void list_rev(struct list *list)
{
  struct list* prev = NULL;
  struct list* cur = list->next;
  struct list* next;
  while (cur != NULL)
    {
      next = cur -> next;
      cur -> next = prev;
      prev = cur;
      cur = next;
    }
  list->next = prev;
}

/*
 * list_half_split(list, second)
 * split the list in half and put the second half in second
 * second is an empty list (just a sentinel)
 */
void list_half_split(struct list *list, struct list *second)
{
  size_t i = 0;
  struct list *stl = list;
  for(; list -> next != NULL; list = list -> next)
    i++;
  list = stl;
  size_t mid = i / 2;
  for(; mid > 0; mid --)
    list = list -> next;
  second -> next = list -> next;
  list -> next = NULL;
}


void freelist(struct list *liste)
{
  if (liste -> next == NULL)
    {
      liste = liste -> next;
      freelist(liste);
    }
  free(liste);
}

int main(){
  struct list *sentinelle = malloc(sizeof(struct list));
  list_init(sentinelle);

  
  printf("list_is_empty de ");
  print_list(sentinelle);
  printf(": %d \n", list_is_empty(sentinelle));
  printf("\n");
  
  struct list *liste6 = malloc(sizeof(struct list));
  list_push_front(sentinelle, liste6);
  liste6->next = NULL;
  liste6->data = 61;
  struct list *liste7 = malloc(sizeof(struct list));
  liste7->next = NULL;
  liste7->data = 69;
  


  printf("list_insert de: ");
  print_list(sentinelle);
  printf(" %d", liste7->data);
  list_insert(sentinelle, liste7);
  printf("\n");
  print_list(sentinelle);
  printf("\n");
  printf("\n");
  
  struct list *liste8 = malloc(sizeof(struct list));
  liste8 -> data = 43 ;
  liste8 -> next = NULL;
  
  printf("list_insert de: ");
  print_list(sentinelle);
  printf(" %d", liste8 -> data);
  printf("\n");
  list_insert(sentinelle, liste8);
  print_list(sentinelle);
  printf("\n");
  printf("\n");

  struct list *liste9 = malloc(sizeof(struct list));
  liste9 -> data = 57 ;
  liste9 -> next = NULL;
  list_insert(sentinelle, liste9);

  printf("Pour la liste: ");
  print_list(sentinelle);
  printf("\n");
  printf("list_is_empty - ");
  printf(" %d", list_is_empty(sentinelle));
  printf("\n");
  printf("list_len - ");
  printf(" %lu \n", list_len(sentinelle));
  printf("list_is_sorted - ");
  printf(" %d \n", list_is_sorted(sentinelle));
  printf("\n");
   
  printf("list_pop_front dans: ");
  print_list(sentinelle);
  printf("\n");
  list_pop_front(sentinelle);
  print_list(sentinelle);
  printf("\n");
  printf("\n");

  printf("List_find de 69: ");
  print_list(sentinelle);
  printf("\n");
  struct list* node = list_find(sentinelle, 69);
  printf(" %d", node->data);
  printf("\n");
  printf("\n");
  
  
  printf("List_rev de: ");
  print_list(sentinelle);
  printf("\n");
  list_rev(sentinelle);
  print_list(sentinelle);
  printf("\n");
  printf("\n");

  printf("Pour la liste: ");
  print_list(sentinelle);
  printf("\n");
  printf("list_is_empty - ");
  printf(" %d", list_is_empty(sentinelle));
  printf("\n");
  printf("list_len - ");
  printf(" %lu \n", list_len(sentinelle));
  printf("list_is_sorted - ");
  printf(" %d \n", list_is_sorted(sentinelle));
  printf("\n");
  
  struct list *liste10 = malloc(sizeof(struct list));
  liste10 -> next = NULL;

  printf("list_half_split de: ");
  print_list(sentinelle);
  printf("\n");
  list_half_split(sentinelle, liste10);
  print_list(liste10);
  printf("\n");
  printf("\n");
  
  freelist(sentinelle);
  //freelist(liste6);
  //freelist(liste7);
  //freelist(liste);
  //freelist(liste9);
  
  return 0;
  printf("\n");
  
}

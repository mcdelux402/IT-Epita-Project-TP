# include <stddef.h>
# include <unistd.h>
# include <proc/readproc.h>

# include "mempool.h"
# include "tree.h"


/* process_set_add(set, pid) tries to add the process pid to the list and returns it */
/* if it's already in the list, returns the process node                             */
/* if it's the first encounter of the process, it'll add it to the process list      */
/* the process will be set as the root of process tree if pid==1                     */

process* init(pid_t pid){
  
}

struct process* process_set_add(struct process_set *set, pid_t pid){
  if (pid == 1){
    struct process* newproc = mempool_alloc(set->pool, sizeof(process));
    newproc.pid = pid;
    newproc = container_of(struct proc, list, cur -> next);
    list_push_front(set->list, &(newproc->list);
    //set as a roof
    
  int i = 0;
  foreach(proc, set){
    struct process* p = container_of(struct proc, list, cur -> next);
    if (p -> pid == pid)
      i = 1;
    
    //return process mode
  }
  if (i == 0)
    //add to the process list
    
  }
}

/* process_set_attach_process(set, procinfo) attaches a new process to the set       */
/* this function is responsible to add the process and attach it to its parent       */
void process_set_attach_process(struct process_set *set, proc_t *procinfo);

/* make_process_set() creates and populates the set of processes                     */
struct process_set* make_process_set(void);
